extend type Query {
    me: User @auth @guard
    "Find a single user by an identifying attribute."
    user(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        "Search by email address."
        email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    )

    : [User!]!  @paginate(defaultCount: 10) @guard
}

input UpdateProfile {
    username: String @rules(apply: ["App\\Rules\\UsernameRule" , "min:2" , "max:32"])
    birthday: DateTime
    donate: Boolean
    gender: String @rules(apply: ["in:MALE,FEMALE,OTHER"])
    donate_text: String @rules(apply: ["min:8" , "max:16"])
}

extend type Mutation {
    UpdateProfile(input: UpdateProfile! @spread): User @guard

    "Upload a file that is publicly available."
    uploadAvatar(file: UploadAvatar!): Boolean @guard

}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    profile : UserProfile! @belongsTo

    "Non-unique name."
    username: String!

    registration_step : Int!
    "Unique email address."
    email: String!

    "Unique email address."
    mobile: String!

    hasActivePlan: Boolean! @method(name: "hasActivePlan")

    subscribedPlans: [UserSubscribedHistory] @hasMany

    "When the email was verified."
    email_verified_at: DateTime

    "When the mobile was verified."
    mobile_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}
